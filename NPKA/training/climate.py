# -*- coding: utf-8 -*-
"""
############################################################################################
 DNN Training utilties

Rammer, W, Seidl, R: A scalable model of vegetation transitions using deep learning
#############################################################################################
"""
import numpy as np


class Climate:
    # static members
    # private members
    nyears = 10 # number of years to look ahead
    dat = None
    lookup = None
    climate_table = None
    soil_table = None
    
    
    def _loadData(self):
        dat = np.loadtxt(self.filename, delimiter=self.delimiter, skiprows=1)
        # first column: table, second column: year, all other columns: data
        self.dat = dat[:, 2:(dat.shape[1])] # all but the first two columns
        key = dat[:, 0].astype(np.int32)*10000 + dat[:, 1].astype(np.int32)
        self.lookup = {}
        for i in range(len(key)):
            self.lookup[key[i]] = i
    
    def _loadEnvironment(self, filename):
        dat = np.loadtxt(filename, delimiter=',', skiprows=1)
        
        # column 1: RID, 2: climate-table-index, 3: soilDepth, 4: nitrogen
        self.climate_table = {}
        self.soil_table = {}
        key = dat[:, 0].astype(np.int16) # RID
        val = dat[:, 1].astype(np.int16) # climate table index
        for i in range(len(dat)):
            self.climate_table[ key[i] ] = val[i]
          
            # transformation: (nitrogen, soildepth), mean: 58.500, std: 41.536, see gpp_v6
            #soil_data = [ [(e[0]-58.500)/41.536, (e[1]-58.500)/41.536, e[2].decode('ascii')] for e in soil_data]
            self.soil_table[ key[i] ] = [ (dat[i, 3]-58.500)/41.536, (dat[i,2]-58.500)/41.536 ]
        
        
    
    def __init__(self, filename, env_file, climate_change=False, gpp_climate=True, delimiter=','):
        self.delimiter=delimiter
        self.filename=filename
        self.climateChange = climate_change
        self.GPPClimate = gpp_climate
        self._loadData()
        self._loadEnvironment(env_file)
        
        self.bl_sampling_list= [49,27,39,44,23,28,35,20,22,49,59,34,35,36,21,30,18,4,43,29,34,1,37,8,57,31,11,13,24,20,1,60,28,32,19,13,10,5,8,21,55,43,31,30,26,11,5,14,42,14,2,24,45,10,35,60,15,19,57,21,38,46,56,48,13,10,56,35,3,60,57,54,34,9,8,10,50,54,36,6,22,52,30,19,35,55,4,57,33,3,22,23,27,42,50,57,40,17,31,22,35,19,41,42,44,22,30,56,42,22,7,22,59,24,27,55,60,4,24,38,39,19,23,6,52,33,54,27,30,39,7,18,21,22,49,5,39,37,40,54,25,40,53,39,42,36,51,23,23,56,30,28,25,54,28,35,49,26,25,21,44,8,58,48,25,57,34,17,30,25,17,7,41,12,15,37,17,2,36,23,44,3,26,14,54,11,52,31,9,29,2,4,1,49,1,31,1,30,57,47,39,14,41,4,55,31,41,48,49,51,46,36,11,33,19,8,53,48,10,57,4,37,8,14,37,15,15,56,28,48,19,7,43,29,31,58,44,27,13,7,12,35,16,45,27,11,26,58,47,43,17,25,3,2,40,3,6,29,12,40,16,36,29,5,19,29,35,6,18,27,35,44,45,23,26,45,32,25,39,44,52,17,2,16,36,47,25,26,7,22,53,56,55,29,37,8,20,14,1,5,2,34,30,60,46,43,27,48,24,37,9,10,49,32,57,6,57,49,59,19,18,33,38,17,20,35,19,54,18,5,28,13,54,53,53,47,16,28,38,52,36,55,45,8,45,7,27,22,55,40,25,20,15,15,7,7,47,36,4,41,8,27,38,47,4,9,37,7,6,9,1,17,58,57,49,15,54,36,37,47,11,40,5,47,58,56,4,49,9,41,18,22,40,1,42,51,5,28,43,5,12,54,27,16,28,2,39,30,39,5,49,44,17,18,31,45,25,55,11,60,55,60,7,46,13,35,53,56,36,48,51,13,33,50,14,49,42,43,53,17,52,30,29,58,4,58,55,15,39,42,41,31,45,41,46,56,30,46,57,19,38,54,4,41,13,59,8,60,16,56,35,11,11,11,38,2,49,42,7,6,42,22,13,54,10,26,41,29,16,42,59,28,24,37,24,13,54,10,30,42,32,18,31,12,8,10,9,52,45,39,17,42,42,24,4,23,46,60,59,20,10,21,55,13,21,21,22,33,20,22,26,12,1,15,1,48,57,30,49,25,52,5,32,59,51,23,47,18,52,26,10,20,21,5,12,42,17,52,55,2,28,16,8,48,9,39,46,13,58,44,48,2,33,51,1,36,53,33,52,58,33,49,57,33,2,56,38,2,1,14,4,28,7,36,24,44,38,50,3,30,33,5,13,47,40,17,48,24,35,7,32,33,47,28,59,26,10,6,58,15,21,28,54,11,18,4,9,24,22,58,19,45,41,2,31,18,22,19,20,39,16,2,35,29,24,48,11,8,2,21,19,38,34,33,54,38,8,25,4,54,14,55,50,60,3,32,3,40,39,6,10,48,17,2,59,14,17,59,56,26,17,43,20,19,33,55,27,40,4,32,14,4,4,26,5,35,57,14,20,3,38,12,59,55,25,24,45,60,58,46,50,18,57,56,4,13,5,8,36,21,40,50,21,44,16,6,52,19,31,30,34,48,5,52,30,48,42,60,45,10,18,5,54,7,55,25,55,56,17,4,18,14,18,52,31,56,49,7,43,19,53,53,22,51,56,23,29,32,21,38,13,48,13,3,49,10,57,13,25,33,12,57,5,55,25,5,37,10,57,28,13,9,14,15,51,52,48,58,58,1,24,1,32,42,27,47,24,42,7,25,40,57,17,45,32,53,54,18,43,19,60,43,11,2,20,46,25,57,50,24,27,9,30,11,44,39,11,49,29,39,58,2,39,45,17,60,32,52,43,59,25,47,32,26,8,11,28,39,28,12,44,19,54,49,40,55,42,28,7,15,36,36,31,47,38,17,5,24,11,42,12,39,4,1,19,13,59,47,5,26,53,39,46,8,57,25,41,55,53,36,8,52,2,43,38,40,60,23,19,32,38,38,7,5,13,44,36,59,59,22,10,49,19,44,51,8,8,27,43,44,6,25,41,51,44,15,40,3,31,34,20,2,1,2,14,19,7,40,30,35,25,38,21,17,30,42,15,46,17,15,51,14,41,12,37,20,23,29,48,32,39,15,36,42,48,15,60,31,15,47,55,36,39,33,46,48,18,8,52,46,42,32,25,49,18,43,18,19,42,56]
        self.bl_sampling_list = [x+1950 for x in self.bl_sampling_list]

        self.cc_sampling_list = [63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,	101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,	139,140,141,142,143,144,145,146,147,148,149,	143,147,145,142,140,146,145,143,144,145,147,146,148,147,141,142,145,143,141,144,148,142,140,143,142,	146,142,147,147,142,141,146,142,146,147,148,140,141,145,148,140,144,140,146,148,148,143,147,145,142,	146,144,149,140,145,142,146,140,145,141,143,147,143,144,148,141,148,141,147,144,145,144,143,144,143,	141,140,146,149,148,143,146,146,147,140,143,144,141,144,142,143,142,142,148,143,143,147,149,141,146,	140,141,142,146,145,147,148,146,140,149,148,142,146,145,143,147,140,141,141,147,147,143,141,149,141,	141,142,143,149,145,141,145,140,145,145,149,148,143,142,143,142,149,142,141,146,146,141,147,148,141,	142,141,146,144,146,144,148,144,143,142,148,144,141,147,142,143,148,144,142,149,147,141,147,143,147,	149,148,147,141,144,143,148,146,145,148,147,143,140,146,144,143,144,145,147,147,145,148,147,143,146,	149,143,143,146,143,142,142,146,140,147,140,145,148,147,148,149,142,142,140,143,145,143,148,145,144,	142,142,141,146,143,146,142,145,149,141,149,149,148,147,148,148,148,144,145,143,142,144,145,141,142,	145,147,141,146,147,141,149,142,148,146,147,143,149,140,146,143,144,145,145,148,144,148,140,140,144,	140,141,148,146,145,140,143,147,141,148,144,144,149,145,147,148,149,145,143,147,142,146,145,148,140,	141,147,146,144,145,149,141,140,142,144,147,141,148,147,148,143,148,149,140,141,148,145,144,144,145,	146,144,142,147,148,143,143,146,142,142,149,143,148,148,145,144,148,141,142,142,140,142,140,148,143,	147,142,142,141,149,143,143,148,143,141,140,149,149,142,146,142,143,141,149,142,141,142,149,143,147,	144,144,149,147,145,147,141,144,142,146,149,144,149,149,147,146,144,146,143,144,142,145,146,149,142,	141,143,149,149,145,143,141,148,145,145,142,144,147,146,148,148,147,144,145,146,146,142,143,145,149,	149,142,146,141,144,148,148,142,143,148,140,144,149,142,146,145,141,143,146,140,141,142,145,148,143,	148,146,145,141,142,149,142,140,145,141,143,142,143,148,144,142,142,149,142,146,141,144,142,146,144,	140,141,143,145,142,142,140,144,144,149,140,144,147,146,149,141,147,142,145,145,143,148,140,147,145,	142,146,141,142,147,149,148,144,145,146,148,148,149,141,141,142,147,149,149,147,149,145,147,145,144,	146,141,142,145,146,144,143,144,147,140,141,143,145,142,147,146,146,144,140,143,144,146,144,147,148,	140,144,141,142,143,140,143,147,148,147,145,143,143,140,146,147,142,149,146,145,146,142,149,149,144,	149,147,147,141,148,144,147,140,140,148,149,144,142,145,146,141,145,146,140,141,140,148,147,149,148,	147,145,149,141,143,140,143,143,144,142,148,147,149,144,145,141,147,148,142,142,147,147,145,148,149,	141,143,145,140,141,144,140,147,146,149,146,147,148,142,144,142,145,149,145,140,141,142,146,141,146,
                                 3,141,141,140,145,145,142,147,149,149,145,140,141,144,143,143,147,144,148,143,147,142,149,141,	147,143,142,143,143,148,147,140,146,143,143,148,142,145,146,148,143,142,142,147,144,145,142,141,142,	147,145,144,144,146,146,140,143,147,145,141,145,140,144,141,143,145,145,144,144,141,145,143,140,149,	145,143,147,147,144,148,147,148,144,147,141,145,140,147,145,144,141,144,140,145,147,149,148,141,141,	140,145,141,143,145,143,141,145,148,142,146,140,149,147,146,140,144,141,148,145,143,147,148,147,149,	144,149,149,149,141,141,140,149,144,145,143,142,141,149,149,149,142,141,147,145,140,143,142,147,147,	148,141,140,148,149,140,140,141,144,148,146,143,142,148,148,149,147,148,149,145,141,147,149,149,146,	145,148,144,145,140,145,144,148,147,141,147,149,140,145,144,145,144,143,144,145,143,144,148,144,149,	149,148,146,140,140,146,148,140,140,142,141,144,146,142,143,141,143,149,148,140,140,148,142,147,140,	145,148,141,148,148,147,142,146,144,146,144,141,141,148,143,145,141,149,144,144,143,140,142,146,142,	148,147,146,143,146,141,143,142,144,146,143,145,146,142,144,143,148,145,148,142,142,144,142,147,140,	144,145,140,144,141,149,140,143,149,147,144,141,142,148,145,149,147,147,142,146,144,142,143,143,144,	145,143,140,146,144,146,149,140,144,147,143,148,149,147,140,148,147,149,146,146,148,140,140,140,146,	146,145,143,148,145,144,144,149,146,141,147,149,146,140,147,147,141,140,148,148,146,144,140,144,145]
        self.cc_sampling_list = [x+1950 for x in self.cc_sampling_list]
        # climate post processing
        if self.GPPClimate:
            self.NValues = 40
            # no scaling, the 40 data values are directly weights from a network
            pass
        else:
            # scale to global min/max based on baseline climate: prec: mean=116, sd=63, temp: 6.3, sd: 6.7
            # columns 1-12: temp, 13-24: prec
            self.dat[:, 0:12] = (self.dat[:, 0:12] - 6.3) / 6.7
            self.dat[:, 12:24] = (self.dat[:, 12:24] - 116) / 63
            self.NValues = 24

            
    """ return a block of data for the cell and year(s)
       year: year of the simulation (year 1=first year in the time series)
    """
    def data(self, cellId, year):
        # (1) the climate table from the environment
        ctab = self.climate_table[cellId]
        # (2) the year from the time series for a slice with nyears 
        if self.climateChange:
            cyear=self.cc_sampling_list[(year - 1):(year+self.nyears-1)]
        else:
            cyear = self.bl_sampling_list[(year - 1):(year+self.nyears-1)]
        # (3) the actual climate data
        key = [ctab*10000 + x for x in cyear]
        index = [self.lookup[k] for k in key]
        return( self.dat[index] )
        
    
 